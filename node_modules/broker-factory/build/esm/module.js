import * as tslib_1 from "tslib";
import { generateUniqueNumber } from 'fast-unique-numbers';
import { isMessagePort } from './guards/message-port';
import { extendBrokerImplementation } from './helpers/extend-broker-implementation';
var ONGOING_REQUESTS = new WeakMap();
var createOrGetOngoingRequests = function (sender) {
    if (ONGOING_REQUESTS.has(sender)) {
        // @todo TypeScript needs to be convinced that has() works as expected.
        return ONGOING_REQUESTS.get(sender);
    }
    var ongoingRequests = new Map();
    ONGOING_REQUESTS.set(sender, ongoingRequests);
    return ongoingRequests;
};
export var createBroker = function (brokerImplementation) {
    var fullBrokerImplementation = extendBrokerImplementation(brokerImplementation);
    return function (sender) {
        var _a;
        var ongoingRequests = createOrGetOngoingRequests(sender);
        sender.addEventListener('message', (function (_a) {
            var message = _a.data;
            var id = message.id;
            if (id !== null && ongoingRequests.has(id)) {
                var _b = ongoingRequests.get(id), reject = _b.reject, resolve = _b.resolve;
                ongoingRequests.delete(id);
                if (message.error === undefined) {
                    resolve(message.result);
                }
                else {
                    reject(new Error(message.error.message));
                }
            }
        }));
        if (isMessagePort(sender)) {
            sender.start();
        }
        var call = function (method, params, transferables) {
            if (params === void 0) { params = null; }
            if (transferables === void 0) { transferables = []; }
            return new Promise(function (resolve, reject) {
                var id = generateUniqueNumber(ongoingRequests);
                ongoingRequests.set(id, { reject: reject, resolve: resolve });
                if (params === null) {
                    sender.postMessage({ id: id, method: method }, transferables);
                }
                else {
                    sender.postMessage({ id: id, method: method, params: params }, transferables);
                }
            });
        };
        var notify = function (method, params, transferables) {
            if (transferables === void 0) { transferables = []; }
            sender.postMessage({ id: null, method: method, params: params }, transferables);
        };
        var functions = {};
        for (var _i = 0, _b = Object.entries(fullBrokerImplementation); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], handler = _c[1];
            functions = tslib_1.__assign({}, functions, (_a = {}, _a[key] = handler({ call: call, notify: notify }), _a));
        }
        return tslib_1.__assign({}, functions);
    };
};
//# sourceMappingURL=/build/es2015/module.js.map