export var createWrapConstantSourceNodeAccurateScheduling = function (createNativeAudioNode) {
    return function (nativeConstantSourceNode, nativeContext) {
        var nativeGainNode = createNativeAudioNode(nativeContext, function (ntvCntxt) { return ntvCntxt.createGain(); });
        nativeConstantSourceNode.connect(nativeGainNode);
        var disconnectGainNode = (function (disconnect) {
            return function () {
                disconnect.call(nativeConstantSourceNode, nativeGainNode);
                nativeConstantSourceNode.removeEventListener('ended', disconnectGainNode);
            };
        })(nativeConstantSourceNode.disconnect);
        nativeConstantSourceNode.addEventListener('ended', disconnectGainNode);
        nativeConstantSourceNode.connect = (function (destination, output, input) {
            if (output === void 0) { output = 0; }
            if (input === void 0) { input = 0; }
            if (destination instanceof AudioNode) {
                // Bug #11: Safari does not support chaining yet, but that wrapper should not be used in Safari.
                return nativeGainNode.connect.call(nativeGainNode, destination, output, input);
            }
            // @todo This return statement is necessary to satisfy TypeScript.
            return nativeGainNode.connect.call(nativeGainNode, destination, output);
        });
        nativeConstantSourceNode.disconnect = function () {
            nativeGainNode.disconnect.apply(nativeGainNode, arguments);
        };
        var startTime = 0;
        var stopTime = null;
        var scheduleEnvelope = function () {
            nativeGainNode.gain.cancelScheduledValues(0);
            nativeGainNode.gain.setValueAtTime(0, 0);
            if (stopTime === null || startTime < stopTime) {
                nativeGainNode.gain.setValueAtTime(1, startTime);
            }
            if (stopTime !== null && startTime < stopTime) {
                nativeGainNode.gain.setValueAtTime(0, stopTime);
            }
        };
        nativeConstantSourceNode.start = (function (start) {
            return function (when) {
                if (when === void 0) { when = 0; }
                start.call(nativeConstantSourceNode, when);
                startTime = when;
                scheduleEnvelope();
            };
        })(nativeConstantSourceNode.start);
        nativeConstantSourceNode.stop = (function (stop) {
            return function (when) {
                if (when === void 0) { when = 0; }
                stop.call(nativeConstantSourceNode, when);
                stopTime = when;
                scheduleEnvelope();
            };
        })(nativeConstantSourceNode.stop);
    };
};
//# sourceMappingURL=/build/es2015/factories/wrap-constant-source-node-accurate-scheduling.js.map