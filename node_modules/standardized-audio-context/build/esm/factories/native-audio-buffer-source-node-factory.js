import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';
import { cacheTestResult } from '../helpers/cache-test-result';
import { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../wrappers/audio-buffer-source-node-start-method-consecutive-calls';
import { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../wrappers/audio-buffer-source-node-start-method-duration-parameter';
import { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../wrappers/audio-scheduled-source-node-start-method-negative-parameters';
import { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../wrappers/audio-scheduled-source-node-stop-method-negative-parameters';
export var createNativeAudioBufferSourceNodeFactory = function (createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) {
    return function (nativeContext, options) {
        if (options === void 0) { options = {}; }
        var nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, function (ntvCntxt) { return ntvCntxt.createBufferSource(); });
        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);
        // Bug #71: Edge does not allow to set the buffer to null.
        if (options.buffer !== undefined && options.buffer !== null) {
            nativeAudioBufferSourceNode.buffer = options.buffer;
        }
        // @todo if (options.detune !== undefined) {
        // @todo    nativeAudioBufferSourceNode.detune.value = options.detune;
        // @todo }
        if (options.loop !== undefined) {
            nativeAudioBufferSourceNode.loop = options.loop;
        }
        if (options.loopEnd !== undefined) {
            nativeAudioBufferSourceNode.loopEnd = options.loopEnd;
        }
        if (options.loopStart !== undefined) {
            nativeAudioBufferSourceNode.loopStart = options.loopStart;
        }
        if (options.playbackRate !== undefined) {
            nativeAudioBufferSourceNode.playbackRate.value = options.playbackRate;
        }
        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.
        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, function () { return testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext); })) {
            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);
        }
        // Bug #92: Edge does not respect the duration parameter yet.
        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, function () { return testAudioBufferSourceNodeStartMethodDurationParameterSupport(); })) {
            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);
        }
        // Bug #44: Only Chrome & Opera throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () { return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext); })) {
            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);
        }
        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () { return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext); })) {
            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);
        }
        // Bug #44: No browser does throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () { return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext); })) {
            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);
        }
        return nativeAudioBufferSourceNode;
    };
};
//# sourceMappingURL=/build/es2015/factories/native-audio-buffer-source-node-factory.js.map